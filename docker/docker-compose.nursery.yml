# Nursery Environment - Standalone Configuration
# Production-like demo environment with sample data
# Uses published Docker image with bundled PostgreSQL and Redis
# Perfect for: demos, trials, showcasing features, onboarding
# Usage: npm run docker:nursery

name: cruxgarden-nursery

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: cruxgarden-nursery-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cruxgarden}
      POSTGRES_USER: ${POSTGRES_USER:-cruxgarden}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cruxgarden_nursery_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_nursery:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cruxgarden}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cruxgarden-nursery-redis
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_nursery:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Database Migrations (runs once before API starts)
  migrations:
    image: ghcr.io/cruxgarden/api:latest
    container_name: cruxgarden-nursery-migrations
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: ${DATABASE_URL:-postgresql://cruxgarden:cruxgarden_nursery_password@postgres:5432/cruxgarden}
    command: ["npm", "run", "migrate:nursery"]
    restart: "no"

  # Crux Garden API - Nursery Configuration
  api:
    image: ghcr.io/cruxgarden/api:latest
    container_name: cruxgarden-nursery-api
    restart: unless-stopped
    depends_on:
      migrations:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      # Application
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      HOSTNAME: ${HOSTNAME:-0.0.0.0}

      # Bundled Services (can override to use external services)
      DATABASE_URL: ${DATABASE_URL:-postgresql://cruxgarden:cruxgarden_nursery_password@postgres:5432/cruxgarden}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}

      # Security
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-min-32-chars-for-development-only}

      # AWS SES (optional for nursery)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-dummy}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-dummy}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_SES_FROM_EMAIL: ${AWS_SES_FROM_EMAIL:-noreply@example.com}
      AWS_S3_ATTACHMENTS_BUCKET: ${AWS_S3_ATTACHMENTS_BUCKET:-crux-garden-attachments}

      # Optional Configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DB_POOL_MIN: ${DB_POOL_MIN:-2}
      DB_POOL_MAX: ${DB_POOL_MAX:-10}
      DB_POOL_IDLE_TIMEOUT: ${DB_POOL_IDLE_TIMEOUT:-30000}
      DB_POOL_ACQUIRE_TIMEOUT: ${DB_POOL_ACQUIRE_TIMEOUT:-60000}
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL:-60000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Crux Garden App - Web Application
  app:
    image: ghcr.io/cruxgarden/app:latest
    container_name: cruxgarden-nursery-app
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "${APP_PORT:-8080}:80"

volumes:
  postgres_data_nursery:
  redis_data_nursery:
