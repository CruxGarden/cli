# Nursery Environment - Standalone Configuration
# Production-like demo environment with sample data
# Uses published Docker image with bundled PostgreSQL and Redis
# Perfect for: demos, trials, showcasing features, onboarding
# Usage: npm run docker:nursery

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: cruxgarden-postgres-nursery
    environment:
      POSTGRES_DB: cruxgarden
      POSTGRES_USER: cruxgarden
      POSTGRES_PASSWORD: cruxgarden_nursery_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_nursery:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cruxgarden"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cruxgarden-redis-nursery
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis_data_nursery:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Database Migrations (runs once before API starts)
  migrations:
    image: ghcr.io/cruxgarden/api:latest
    container_name: cruxgarden-migrations-nursery
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://cruxgarden:cruxgarden_nursery_password@postgres:5432/cruxgarden
    command: ["npm", "run", "migrate:nursery"]
    restart: "no"

  # Crux Garden API - Nursery Configuration
  api:
    image: ghcr.io/cruxgarden/api:latest
    container_name: cruxgarden-api-nursery
    restart: unless-stopped
    depends_on:
      migrations:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    ports:
      - "${PORT:-3001}:3000"
    environment:
      # Application
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: 0.0.0.0

      # Bundled Services
      DATABASE_URL: postgresql://cruxgarden:cruxgarden_nursery_password@postgres:5432/cruxgarden
      REDIS_URL: redis://redis:6379

      # Security
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-min-32-chars-for-development-only}

      # AWS SES (optional for nursery)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-dummy}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-dummy}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      FROM_EMAIL_ADDRESS: ${FROM_EMAIL_ADDRESS:-noreply@example.com}

      # Optional Configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DB_POOL_MIN: ${DB_POOL_MIN:-2}
      DB_POOL_MAX: ${DB_POOL_MAX:-10}
      DB_POOL_IDLE_TIMEOUT: ${DB_POOL_IDLE_TIMEOUT:-30000}
      DB_POOL_ACQUIRE_TIMEOUT: ${DB_POOL_ACQUIRE_TIMEOUT:-60000}
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL:-60000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data_nursery:
  redis_data_nursery:
